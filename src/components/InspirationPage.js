import React, { useState, useMemo, useEffect, useRef, useCallback } from 'react';
import ProjectModal from './ProjectModal';
import LazyMedia from './LazyMedia';
import LoadingSpinner from './LoadingSpinner';
import useInfiniteScroll from '../hooks/useInfiniteScroll';
import inspirationData from '../data/inspiration_data.json';
import './InspirationPage.css';

const InspirationPage = () => {
  const [selectedProject, setSelectedProject] = useState(null);
  const [activeFilter, setActiveFilter] = useState('All');
  const [visibleRows, setVisibleRows] = useState(new Set()); // ËÆ∞ÂΩïÂ∑≤ÁªèÂèØËßÅÁöÑË°å
  const observerRef = useRef(null);
  const rowRefs = useRef({});

  // Â§ÑÁêÜÊ†áÁ≠æÂ≠óÁ¨¶‰∏≤ÔºåËΩ¨Êç¢‰∏∫Êï∞ÁªÑ
  const processedProjects = useMemo(() => 
    inspirationData.map(project => ({
      ...project,
      // Â∞ÜtagsÂ≠óÁ¨¶‰∏≤ÂàÜÂâ≤‰∏∫Êï∞ÁªÑÔºåÂπ∂ÂéªÈô§Á©∫Ê†º
      tags: project.tags.split(',').map(tag => tag.trim())
    })), []);

  // Á≠õÈÄâÈ°πÁõÆ
  const filteredProjects = useMemo(() => 
    activeFilter === 'All' 
      ? processedProjects 
      : processedProjects.filter(project => 
          project.tags.some(tag => tag.toLowerCase() === activeFilter.toLowerCase())
        ), [activeFilter, processedProjects]);

  // ‰ΩøÁî®Êó†ÈôêÊªöÂä®Hook - ‰ºòÂåñÈ¶ñÂ±èÂä†ËΩΩ
  const {
    displayedItems: displayedProjects,
    isLoading,
    hasMore,
    lastItemRef,
    reset
  } = useInfiniteScroll(filteredProjects, 12); // Â¢ûÂä†Âà∞12‰∏™È°πÁõÆÔºåËøôÊ†∑Êúâ4Ë°å

  // ÂΩìÁ≠õÈÄâÊù°‰ª∂ÊîπÂèòÊó∂ÈáçÁΩÆ
  useEffect(() => {
    reset();
    setVisibleRows(new Set()); // ÈáçÁΩÆÂèØËßÅË°å
    
    // Âª∂ËøüÂêØÂä®Á¨¨‰∏ÄÊéíÂä®ÁîªÔºåÊ®°ÊãüÁÇπÂáªÁ≠õÈÄâÂô®ÁöÑÊïàÊûú
    setTimeout(() => {
      if (displayedProjects.length > 0) {
        setVisibleRows(prev => {
          const newVisible = new Set(prev);
          newVisible.add(0); // Á´ãÂç≥ÊòæÁ§∫Á¨¨‰∏ÄÊéí
          console.log(`üé¨ Á≠õÈÄâÂô®ÁÇπÂáª(${activeFilter}) - Á¨¨‰∏ÄÊéíÁ´ãÂç≥ÂºÄÂßãÂä®Áîª`);
          return newVisible;
        });
      }
    }, 100); // 100msÂª∂ËøüÔºåËÆ©ÈáçÁΩÆÁîüÊïàÂêéÂÜçÂêØÂä®Âä®Áîª
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [activeFilter, reset, filteredProjects.length]);

  // ÂΩìdisplayedProjectsÊîπÂèòÊó∂ÔºåÁ°Æ‰øùÁ¨¨‰∏ÄÊéíÂä®ÁîªËß¶Âèë
  useEffect(() => {
    if (displayedProjects.length > 0) {
      setTimeout(() => {
        setVisibleRows(prev => {
          if (!prev.has(0)) {
            const newVisible = new Set(prev);
            newVisible.add(0); // Á°Æ‰øùÁ¨¨‰∏ÄÊéíÂßãÁªàÂèØËßÅ
            console.log('üé¨ ÂÜÖÂÆπÂä†ËΩΩÂÆåÊàê - Á¨¨‰∏ÄÊéíÂºÄÂßãÂä®Áîª');
            return newVisible;
          }
          return prev;
        });
      }, 50);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [displayedProjects.length]);

  // ËÆæÁΩÆIntersection Observer
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const rowIndex = parseInt(entry.target.dataset.rowIndex, 10);
            // Ë∑≥ËøáÁ¨¨‰∏ÄÊéíÔºåÂõ†‰∏∫Á¨¨‰∏ÄÊéíÈÄöËøáÁ≠õÈÄâÂô®Áõ¥Êé•Ëß¶Âèë
            if (rowIndex > 0) {
              setVisibleRows(prev => {
                const newVisible = new Set(prev);
                newVisible.add(rowIndex);
                console.log(`üé¨ Á¨¨${rowIndex + 1}Ë°åÊªöÂä®ËøõÂÖ•ËßÜÂõæÔºåÂºÄÂßãÂä®Áîª`);
                return newVisible;
              });
            }
          }
        });
      },
      {
        threshold: 0.3, // ÂΩì30%ÁöÑË°åÂèØËßÅÊó∂Ëß¶Âèë
        rootMargin: '0px 0px -50px 0px' // Á®çÂæÆÊèêÂâçËß¶Âèë
      }
    );

    observerRef.current = observer;

    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
    };
  }, []);

  // ËßÇÂØüË°åÂÖÉÁ¥†
  const setRowRef = useCallback((element, rowIndex) => {
    if (element && observerRef.current) {
      element.dataset.rowIndex = rowIndex;
      observerRef.current.observe(element);
      rowRefs.current[rowIndex] = element;
    }
  }, []);

  // Á≠õÈÄâÂô®ÁÇπÂáªÂ§ÑÁêÜÂáΩÊï∞
  const handleFilterClick = (option) => {
    console.log(`üéØ ÁÇπÂáªÁ≠õÈÄâÂô®: ${option}`);
    setActiveFilter(option);
  };

  const filterOptions = ['All', 'Branding', 'Digital', 'Motion', 'Graphic', 'Typography', 'Generative Art', 'AIGC'];

  const getTagColor = (tag) => {
    const colors = {
      'Branding': 'bg-design-green',
      'Typography': 'bg-design-yellow',
      'Generative Art': 'bg-design-purple',
      'Motion': 'bg-orange-500',
      'Digital': 'bg-cyan-500',
      'Graphic': 'bg-pink-500',
      'AIGC': 'bg-red-500'
    };
    return colors[tag] || 'bg-gray-500';
  };

  // ‰∏çÈúÄË¶ÅÊâãÂä®ÁºñÁ†ÅURLÔºåÊµèËßàÂô®‰ºöËá™Âä®Â§ÑÁêÜ
  const getEncodedPath = (path) => {
    return path;
  };

  // Ëé∑ÂèñÈ°πÁõÆÊâÄÂú®ÁöÑË°å
  const getRowIndex = (index) => Math.floor(index / 3);

  // Ëé∑ÂèñÈ°πÁõÆÂú®Ë°åÂÜÖÁöÑ‰ΩçÁΩÆÔºà0, 1, 2Ôºâ
  const getPositionInRow = (index) => index % 3;

  // Ëé∑ÂèñÂä®ÁîªÁ±ªÂêç
  const getAnimationClass = (index) => {
    const rowIndex = getRowIndex(index);
    const positionInRow = getPositionInRow(index);
    const isRowVisible = visibleRows.has(rowIndex);
    
    return isRowVisible 
      ? `inspiration-item-enter inspiration-item-enter-active position-${positionInRow}` 
      : `inspiration-item-enter position-${positionInRow}`;
  };

  // Â∞ÜÈ°πÁõÆÊåâË°åÂàÜÁªÑ
  const projectRows = useMemo(() => {
    const rows = [];
    for (let i = 0; i < displayedProjects.length; i += 3) {
      rows.push(displayedProjects.slice(i, i + 3));
    }
    return rows;
  }, [displayedProjects]);

  return (
    <div className="ml-80 min-h-screen bg-dark-bg">
      {/* Header */}
      <div className="flex justify-between items-start px-8 py-8">
        <h2 className="text-2xl font-medium text-light-gray uppercase">inspiration</h2>
        <div className="flex space-x-4 text-sm font-medium">
          {filterOptions.map((option) => (
            <button
              key={option}
              onClick={() => handleFilterClick(option)}
              className={`transition-colors duration-200 hover:opacity-80 ${
                activeFilter === option 
                  ? 'text-[#E2E2E2]' 
                  : 'text-[#787878]'
              }`}
            >
              {option}
            </button>
          ))}
        </div>
      </div>

      {/* Projects Grid */}
      <div className="px-8 pb-8">
        {displayedProjects.length > 0 ? (
          <>
            {projectRows.map((row, rowIndex) => (
              <div
                key={`row-${rowIndex}-${activeFilter}`}
                ref={(el) => setRowRef(el, rowIndex)}
                className="grid grid-cols-3 gap-6 mb-6"
              >
                {row.map((project, positionInRow) => {
                  const projectIndex = rowIndex * 3 + positionInRow;
                  return (
                    <div
                      key={project.id}
                      ref={projectIndex === displayedProjects.length - 1 ? lastItemRef : null}
                      className={`cursor-pointer group ${getAnimationClass(projectIndex)}`}
                      onClick={() => setSelectedProject(project)}
                    >
                      <div className="aspect-[4/5] bg-design-gray rounded-xl overflow-hidden mb-6 group-hover:opacity-80 transition-opacity">
                        <LazyMedia
                          src={getEncodedPath(project.cover)}
                          alt={project.title}
                          className="w-full h-full object-cover"
                          threshold={0.2} // ÊèêÂâç20%ÂºÄÂßãÂä†ËΩΩ
                          placeholder={
                            <div className="w-full h-full bg-gray-800 flex items-center justify-center">
                              <div className="spinner">
                                <div className="bounce1"></div>
                                <div className="bounce2"></div>
                                <div className="bounce3"></div>
                              </div>
                            </div>
                          }
                        />
                      </div>
                      <h3 className="text-light-gray text-3xl font-medium mb-2.5 group-hover:opacity-80 transition-opacity uppercase">
                        {project.title}
                      </h3>
                      <div className="flex flex-wrap gap-1.5 mb-8">
                        {project.tags.map((tag, index) => (
                          <span
                            key={index}
                            className={`px-2 py-0.5 text-sm font-medium text-dark-bg rounded-md leading-tight ${getTagColor(tag)}`}
                          >
                            {tag}
                          </span>
                        ))}
                      </div>
                    </div>
                  );
                })}
              </div>
            ))}
            
            {/* Âä†ËΩΩÊõ¥Â§öÊåáÁ§∫Âô® */}
            {isLoading && (
              <div className="mt-8">
                <LoadingSpinner 
                  size="md" 
                  className="py-8"
                />
              </div>
            )}
            
            {/* Â∫ïÈÉ®Áä∂ÊÄÅ */}
            {!hasMore && displayedProjects.length > 0 && (
              <div className="text-center py-8">
                <p className="text-[#787878] text-lg">
                  Â∑≤ÊòæÁ§∫ÂÖ®ÈÉ® {displayedProjects.length} ‰∏™Ê°à‰æã
                </p>
              </div>
            )}
          </>
        ) : (
          <div className="flex items-center justify-center h-64">
            <p className="text-[#787878] text-lg">Ê≤°ÊúâÊâæÂà∞Á¨¶ÂêàÊù°‰ª∂ÁöÑÊ°à‰æã</p>
          </div>
        )}
      </div>

      {/* Modal */}
      {selectedProject && (
        <ProjectModal
          project={selectedProject}
          onClose={() => setSelectedProject(null)}
        />
      )}
    </div>
  );
};

export default InspirationPage; 